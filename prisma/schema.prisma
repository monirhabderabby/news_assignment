// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(50)
  email     String    @unique @db.VarChar(50)
  password  String    @db.VarChar(50)
  image     String    @db.VarChar(300)
  accounts  Account[]
  news      news[]
  comments  comment[]
  createdAt DateTime  @default(now()) @db.Timestamp(0)
  updatedAt DateTime  @default(now()) @updatedAt @db.Timestamp(0)
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int     @unique
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user user @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model categories {
  id        Int      @id @default(autoincrement())
  name      String   @unique @db.VarChar(100)
  news_list news[]
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(0)
}

enum newsType {
  features
  latest
  populer
}

model news {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(100)
  short_des String   @db.VarChar(400)
  image     String   @db.VarChar(300)
  keywords  String   @db.VarChar(300)
  type      newsType
  text1     String   @db.VarChar(600)
  text2     String   @db.VarChar(600)
  text3     String   @db.VarChar(600)
  text4     String   @db.VarChar(600)

  userID Int
  user   user @relation(fields: [userID], references: [id])

  catID Int

  categories categories @relation(fields: [catID], references: [id], onDelete: Restrict, onUpdate: Cascade)

  comments comment[]

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(0)
}

model comment {
  id   Int    @id @default(autoincrement())
  test String @db.VarChar(400)

  userId Int

  user user @relation(fields: [userId], references: [id])

  newsId Int

  news news @relation(fields: [newsId], references: [id])
}

model socials {
  id        Int      @id @default(autoincrement())
  facebook  String   @db.VarChar(200)
  youtube   String   @db.VarChar(200)
  twitter   String   @db.VarChar(200)
  instagram String   @db.VarChar(200)
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(0)
}
